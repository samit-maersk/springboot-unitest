name: Build

on:
  push:
    branches:
      - main
      - 'releases/**'
jobs:
  maven-build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Build with Maven
      run: ./mvnw -B clean install

    - name: Upload Artifact (jar)
      uses: actions/upload-artifact@v2
      with:
        name: ${{ github.event.repository.name }}-jar
        path: ${{ github.workspace }}/target/*.jar
        if-no-files-found: error

  docker:
    needs: [maven-build]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Download Artifact (Jar)
      uses: actions/download-artifact@v2
      with:
        name: ${{ github.event.repository.name }}-jar
        path: target/
    - debug:
      run: |
        ls -al
        ls -al target/
    # move this steps to maven build and convert this github script
    - name: Custom Versioning
      id: custom-versioning
      run: |
        version=1.0.$(date "+%Y%m%d%H%M")
        echo "VERSION=${version,,}" >> $GITHUB_ENV
        echo ::set-output name=VERSION::$version

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=raw,value=${{ steps.custom-versioning.outputs.VERSION }}
    - name: Docker Build
      uses: docker/build-push-action@v3
      with:
        context: .
        load: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        #outputs: type=docker,dest=/tmp/image.tar # export as tar and build docker image with docker load --input /tmp/image.tar
    - name: docker images ls
      run: |
        #docker load --input /tmp/image.tar
        docker image ls -a

    - name: trivy scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ steps.meta.outputs.tags }}'
        exit-code: '0'
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'CRITICAL,HIGH'
        #format: 'table'
        format: 'sarif'
        output: 'trivy-results.sarif'
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Log in to the Container registry
      uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
      with:
        registry: 'ghcr.io'
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push
      uses: docker/build-push-action@v3
      with:
        #context: .
        #platforms: linux/amd64,linux/arm64
        push: true #${{ github.event_name != 'pull_request' }} ${{ github.ref != 'refs/heads/main' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}